---
import Layout from '../layouts/Layout.astro';
import { initializeGameData, tributes } from '../hunger/MainProcess';

// 初始化游戏数据
initializeGameData();

// 创建districts数组
const districts = Array(12).fill(null).map((_, i) => ({
  number: i + 1,
  tributes: [i * 2, i * 2 + 1]
}));

// 将初始数据序列化后注入
const initialTributes = JSON.stringify(tributes);
---

<!-- 在 head 中注入初始数据 -->
<script define:vars={{initialTributes}}>
    // 初始化时设置数据
    if (!localStorage.getItem('tributes')) {
        localStorage.setItem('tributes', initialTributes);
    }
</script>

<Layout title="Customize Tributes">
  <main class="container mx-auto px-4 py-8 pt-20">
    <h1 class="text-3xl md:text-4xl font-bold text-center mb-4 md:mb-6 text-white">
      Customize Tributes
    </h1>
    
    <div class="max-w-md mx-auto text-center mb-8 md:mb-12 space-y-2">
      <p class="text-gray-400 text-sm md:text-base leading-relaxed">
        After entering the Imgur avatar URL,
      </p>
      <p class="text-gray-400 text-sm md:text-base leading-relaxed">
        click anywhere else to see the avatar update in real-time
      </p>
      <div class="pt-2">
        <p class="text-gray-400 text-sm md:text-base leading-relaxed">
          Need help with adding custom avatars?
        </p>
        <a 
          href="/blog/guide" 
          class="inline-block text-primary hover:text-primary/80 text-sm md:text-base font-medium transition-colors"
        >
          Check out our guide here
        </a>
      <div class="pt-4">
        <p class="text-gray-400 text-sm md:text-base leading-relaxed">
          Have suggestions or found issues?
        </p>
        <a 
          href="/feedback" 
          class="inline-block text-primary hover:text-primary/80 text-sm md:text-base font-medium transition-colors"
        >
          Share your feedback here
        </a>
      </div>
      </div>
    </div>

    <div class="max-w-6xl mx-auto">
      {districts.map((district, index) => (
        index % 3 === 0 && (
          <div class="mb-4 md:mb-8">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
              {districts.slice(index, index + 3).map(d => (
                <div class="col-span-1">
                  <h2 class="text-xl md:text-2xl font-semibold text-center mb-3 md:mb-4 text-white">
                    District {d.number}
                  </h2>
                  <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 md:gap-4">
                    {d.tributes.map(tributeIndex => {
                      const tribute = tributes[tributeIndex];
                      return (
                        <div class="bg-gray-800 p-4 md:p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                          <div class="flex flex-col items-center space-y-3 md:space-y-4">
                            <div class="relative">
                              <img
                                id={`tribute-img-${tributeIndex}`}
                                src={tribute.avatar}
                                alt={tribute.name}
                                class="w-24 h-24 md:w-32 md:h-32 rounded-full object-cover border-4 border-gray-700"
                              />
                            </div>

                            <div class="w-full">
                              <input 
                                type="text" 
                                class="w-full px-2 md:px-3 py-1.5 md:py-2 bg-gray-700 border border-gray-600 rounded-lg text-sm text-center text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent placeholder-gray-400"
                                placeholder="Enter imgur URL..."
                                data-tribute-index={tributeIndex}
                                data-field="avatar"
                              />
                            </div>

                            <div class="w-full">
                              <input 
                                type="text"
                                value={tribute.name}
                                class="w-full px-2 md:px-3 py-1.5 md:py-2 bg-gray-700 border border-gray-600 rounded-lg text-center font-semibold text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent placeholder-gray-400"
                                placeholder="Enter name..."
                                data-tribute-index={tributeIndex}
                                data-field="name"
                              />
                            </div>

                            <div class="w-full">
                              <div class="gender-selector bg-gray-700 p-1 rounded-lg flex justify-center" data-tribute-index={tributeIndex}>
                                <button 
                                  class={`gender-btn flex-1 px-3 md:px-4 py-1.5 md:py-2 rounded-md text-xs md:text-sm font-medium transition-all duration-200 ${tribute.gender === 'Male' ? 'bg-gray-900 text-white shadow-sm' : 'text-gray-400 hover:text-gray-300'}`}
                                  data-gender="Male"
                                >
                                  Male
                                </button>
                                <button 
                                  class={`gender-btn flex-1 px-3 md:px-4 py-1.5 md:py-2 rounded-md text-xs md:text-sm font-medium transition-all duration-200 ${tribute.gender === 'Female' ? 'bg-gray-900 text-white shadow-sm' : 'text-gray-400 hover:text-gray-300'}`}
                                  data-gender="Female"
                                >
                                  Female
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )
      ))}
    </div>

    <div class="mt-8 md:mt-12 mb-6 md:mb-8 text-center">
      <button
        id="proceedButton"
        class="w-full sm:w-auto inline-block px-6 md:px-8 py-2.5 md:py-3 bg-primary hover:bg-primary/80 text-white font-bold rounded-lg transition-colors"
      >
        Proceed
      </button>
    </div>
  </main>
</Layout>

<script>
  import { tributes } from '../hunger/MainProcess';
// 页面加载时初始化localStorage
document.addEventListener('DOMContentLoaded', async () => {
  // 如果localStorage中没有tributes数据，则初始化
  //if (!localStorage.getItem('tributes')) {
  //  const { initializeGameData } = await import('../hunger/MainProcess');
  //  initializeGameData();
  //  // 将初始化的数据保存到localStorage
  //  const tributes = JSON.parse(localStorage.getItem('tributes') || '[]');
  //  localStorage.setItem('tributes', JSON.stringify(tributes));
  //}

  //after change
  const localtributes = JSON.parse(localStorage.getItem('tributes') || '[]');
});

// 处理名字输入
document.querySelectorAll('input[data-field="name"]').forEach(input => {
  input.addEventListener('change', (e) => {
    const target = e.target as HTMLInputElement;
    const tributeIndex = parseInt(target.dataset.tributeIndex || '0');
    const tributes = JSON.parse(localStorage.getItem('tributes') || '[]');
    
    // 只更新 name 字段,保留其他字段的现有值
    tributes[tributeIndex] = {
      ...tributes[tributeIndex], // 保留现有的所有字段
      name: target.value
    };
    
    localStorage.setItem('tributes', JSON.stringify(tributes));
  });
});

// 处理头像输入
document.querySelectorAll('input[data-field="avatar"]').forEach(input => {
  input.addEventListener('change', (e) => {
    const target = e.target as HTMLInputElement;
    const tributeIndex = parseInt(target.dataset.tributeIndex || '0');
    const tributes = JSON.parse(localStorage.getItem('tributes') || '[]');
    
    let newAvatarUrl = target.value.trim();
    
    // 如果输入了URL，进行处理
    if (newAvatarUrl) {
      // 转换imgur链接格式
      if (newAvatarUrl.includes('imgur.com')) {
        // 提取imgur ID
        const imgurId = newAvatarUrl.split('/').pop()?.split('.')[0];
        if (imgurId) {
          // 构建新的直链URL
          newAvatarUrl = `https://i.imgur.com/${imgurId}.png`;
          
          // 更新input的值为转换后的URL
          target.value = newAvatarUrl;
        }
      }

      // 更新localStorage
      tributes[tributeIndex] = {
        ...tributes[tributeIndex],
        avatar: newAvatarUrl
      };
      localStorage.setItem('tributes', JSON.stringify(tributes));
      
      // 更新图片显示
      const imgElement = document.getElementById(`tribute-img-${tributeIndex}`);
      if (imgElement) {
        imgElement.src = newAvatarUrl;
      }
    }
  });
});

// 处理性别选择
document.querySelectorAll('.gender-selector').forEach(selector => {
  selector.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (!target.classList.contains('gender-btn')) return;
    
    const container = target.closest('.gender-selector') as HTMLElement;
    const tributeIndex = parseInt(container.dataset.tributeIndex || '0');
    const gender = target.dataset.gender as string;
    
    // 更新数据
    const tributes = JSON.parse(localStorage.getItem('tributes') || '[]');
    tributes[tributeIndex] = {
      ...tributes[tributeIndex],
      gender: gender
    };
    localStorage.setItem('tributes', JSON.stringify(tributes));

    // 更新UI
    container.querySelectorAll('.gender-btn').forEach(btn => {
      const isSelected = (btn as HTMLElement).dataset.gender === gender;
      btn.classList.toggle('bg-gray-900', isSelected);
      btn.classList.toggle('text-white', isSelected);
      btn.classList.toggle('shadow-sm', isSelected);
      btn.classList.toggle('text-gray-400', !isSelected);
    });
  });
});

// 添加Proceed按钮事件处理
document.getElementById('proceedButton')?.addEventListener('click', async () => {
  const { processGamePhase, initGame } = await import('../hunger/GameFlow');
  const { updateTributes, loadGameState, updateGameState } = await import('../hunger/MainProcess');

  const customTributes = JSON.parse(localStorage.getItem('tributes') || '[]');
  updateTributes(customTributes);
  
  initGame();

  // 4. 开始游戏流程
  await processGamePhase();
});
</script>

<style>
  main {
    min-height: 100vh;
  }

  input::placeholder {
    color: #9CA3AF;
  }

  .gender-selector {
    backdrop-filter: blur(8px);
  }

  .gender-btn {
    user-select: none;
  }
</style>
